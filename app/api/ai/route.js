import { NextResponse } from "next/server";
import { GoogleGenAI } from "@google/genai";

// Initialize the Google GenAI client with the API key from environment variables.
const ai = new GoogleGenAI({ apiKey: process.env.api });

export async function POST(request) {
  try {
    const body = await request.json();

    // The client should send the data as Base64 encoded strings,
    // so we don't need a separate conversion step here.
    const cctBase64 = body.img;
    const pdfBase64 = body.pdf;

    const prompt = `"I have two files that need analysis:
    CCTV Image: A surveillance snapshot showing a specific location
    Typhoon Weather Report: Meteorological data for an incoming typhoon affecting this area

    Analysis Requirements:

    Examine the CCTV image to identify:

    Specific building types, construction materials, and structural condition
    Exact elevation and topography of the area
    Precise infrastructure present (roads, power lines, drainage, etc.)
    Vegetation and natural features
    Population density indicators
    Exact geographical features and landmarks visible



    Output Needed:
    Create a location-specific public announcement/advisory that includes:

    Current Situation: Precise description of THIS EXACT AREA and incoming typhoon threat
    Location-Specific Risks: Exact dangers for THIS PARTICULAR AREA based on visible conditions (specific buildings, terrain, elevation)
    Targeted Actions: Detailed instructions tailored to this specific location's characteristics
    Precise Safety Warnings: Specific hazards unique to this area (exact flood zones, vulnerable structures, dangerous areas to avoid)

    Target Audience: Residents of this specific location who need immediate, location-tailored information
    Tone: Direct, urgent but calm, like a targeted emergency broadcast for this exact area
    Format: Location-specific public announcement - reference actual visible features, streets, buildings, and geographical elements from the CCTV image
    CRITICAL REQUIREMENT:

    BE SPECIFIC: Reference actual buildings, terrain features, and infrastructure visible in the CCTV image
    BE PRECISE: Use exact details about elevation, building types, and local conditions
    BE ACCURATE: Base all recommendations on the specific characteristics of this exact location
    AVOID VAGUE LANGUAGE: No generic advice - everythin`;

    if (!cctBase64 || !pdfBase64) {
      return NextResponse.json(
        {
          error:
            "Please provide both an image (img) and a PDF (pdf) file in the request body.",
        },
        { status: 400 }
      );
    }

    // Construct the contents array for the multimodal request.
    // Each piece of data (image, pdf, text) is a separate part in a single parts array.
    const contents = [
      {
        parts: [
          // Part for the CCTV image
          {
            inlineData: {
              mimeType: "image/jpeg", // Assuming JPEG for the CCTV image. Adjust if needed.
              data: cctBase64,
            },
          },
          // Part for the PDF file
          {
            inlineData: {
              mimeType: "application/pdf",
              data: pdfBase64,
            },
          },
          // Part for the text prompt
          {
            text: prompt,
          },
        ],
      },
    ];

    // Call the Gemini API to generate content based on the multimodal input.
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: contents,
    });

    // Extract the generated text from the API response.
    const generatedText = response?.candidates?.[0]?.content?.parts?.[0]?.text;

    // Check if a response was successfully generated.
    if (!generatedText) {
      return NextResponse.json(
        {
          error:
            "No text was generated by the API. The prompt or data might be insufficient.",
        },
        { status: 500 }
      );
    }

    // Return the generated text in the response.
    return NextResponse.json({
      text: generatedText,
      success: true,
    });
  } catch (error) {
    console.error("Error in API route:", error);

    return NextResponse.json(
      {
        error: "An internal server error occurred.",
        details: error.message,
      },
      { status: 500 }
    );
  }
}
